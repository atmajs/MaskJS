UTest({
	'sync': {
		'should walk through the nodes' () {
			RunSync(
				` div { em; i }; span; h4; `
				, 'div,em,i,span,h4'
			);
		},
		'modifiers': {
			'should skip children' () {
				RunSync(
					` div { section { em; i }}; span; h4; `
					, 'div,section,span,h4'
					, (node) => {
						if (node.tagName === 'section') 
							return { deep: false };
					}
				);
			},
			'should replace node' () {
				var dom = RunSync(
					` div; section { em; i }; span; h4; `
					, 'div,section,span,h4'
					, (node) => {
						if (node.tagName === 'section') 
							return { replace: mask.parse('menu') };
					}
				);
				
				eq_(dom.nodes[1].tagName, 'menu');
			}
		}
	},
	'async': {
		'should walk through the nodes' (done) {
			RunAsync(
				` div { em; i }; span; h4; `
				, 'div,em,i,span,h4'
				, null
				, done
			);
		},
		'modifiers': {
			'should skip children' (done) {
				RunAsync(
					` div { section { em; i }}; span; h4; `
					, 'div,section,span,h4'
					, (node, next) => {
						if (node.tagName === 'section') 
							return next({ deep: false });
						next();
					}
					, done
				);
			},
			'should replace node' (done) {
				RunAsync(
					` div; section { em; i }; span; h4; `
					, 'div,section,span,h4'
					, (node, next) => {
						if (node.tagName === 'section') 
							return next({ replace: mask.parse('menu') });
						next();
					}
					, (dom) => {
						eq_(dom.nodes[1].tagName, 'menu');
						done();
					}
				);
				
			}
		}
	}
});

function RunSync(...args) {
	return Run(mask.TreeWalker.walk, args);
}
function RunAsync(...args) {
	return Run(mask.TreeWalker.walkAsync, args);
}
function Run(walk, args) {
	var [ template, expectNodes, fn, done ] = args;
	
	var dom    = mask.parse(template);
	var expect = expectNodes.split(',');
	var root   = walk(dom, function(node, next){
		eq_(node.tagName, expect.shift());
		
		if (fn) 
			return fn.apply(null, arguments);
		
		if (next) next();
	}, done);
	
	eq_(expect.length, 0);
	return root;
}

// vim: set ft=js: