UTest({
	'exports': {
		'should parse export' () {
			var import_ = parse(`
					import :a, B , c	, _d,  _d1 ,$j from "/ foo "
			`);
			eq_(import_.path, '/ foo ');
			has_(import_.exports, [
				{ name: ':a' },
				{ name: 'B' },
				{ name: 'c' },
				{ name: '_d' },
				{ name: '_d1' },
				{ name: '$j' },
			]);
		},
		'should parse export with newlines' () {
			var import_ = parse(`
				import
					Foo,
					Baz
				from "foo";
			`);
			has(import_.exports, [
				{ name: 'Foo' },
				{ name: 'Baz' },
			])
		}
	},
	'as content type' () {
		var import_ = parse('import from "baz" is script;');
		has_(import_, {
			path: 'baz',
			contentType: 'script'
		});
	},
	'serializations' () {
		[
			{
				template: "import Foo from 'foo';"
			},
			{
				template: "import Foo as Baz from 'foo';"
			},
			{
				template: "import Foo as Baz, Qux as q, T from 'foo';"
			},
			{
				template: "import from '/foo/test';"
			},
			{
				template: "import * as X from '/foo/test';"
			},
			{
				template: "import * as X from '/foo/test' is mask;"
			},
			{
				template: "import async from '/foo/test' is mask;"
			},
			{
				template: "import sync from './Compos';"
			},
		]
		.forEach(data => {
			var {template} = data;
			var nodes = Mask.parse(template);
			var str = Mask.stringify(nodes);
			eq_(str, template);
		})
	},
	'should parse `async` and `sync` keyword' () {
		[
			{
				template: "import async Foo from 'foo';"
			},
			{
				template: "import async Foo as Baz from 'foo';"
			},
			{
				template: "import async Foo as Baz, Qux as q, T from 'foo';"
			},
			{
				template: "import async * as X from '/foo/test';"
			},
			{
				template: "import async * as X from '/foo/test' is mask;"
			},
			{
				template: "import sync Foo from 'foo';"
			},
			{
				template: "import sync Foo as Baz from 'foo';"
			},
			{
				template: "import sync Foo as Baz, Qux as q, T from 'foo';"
			},
			{
				template: "import sync * as X from '/foo/test';"
			},
			{
				template: "import sync * as X from '/foo/test' is mask;"
			},
		]
		.forEach(data => {
			var {template} = data;
			var nodes = Mask.parse(template);
			var str = Mask.stringify(nodes);
			eq_(str, template);
		})
	},
	'should parse and serialize metas' () {
		[
			{
				template: "import from 'foo' is dynamic;"
			},
			{
				template: "import from 'foo' is static;",
				expect: "import from 'foo';"
			},
			{
				template: "import from 'foo' is json dynamic server;"
			},
			{
				template: "import from 'foo' is both dynamic json;",
				expect: "import from 'foo' is json dynamic;"
			},
		]
		.forEach(data => {
			var {template, expect} = data;
			var nodes = Mask.parse(template);
			var str = Mask.stringify(nodes);
			eq_(str, expect || template);
		})
	},
	'namespaces': {
		'should parse namespaces' () {
			[
				{
					template: "import FooService from Services.Foos;",
					expect (node) {
						eq_(node.namespace, 'Services.Foos');
					}
				},
				{
					template: "import FooService from Services.Foos is script;",
					expect (node) {
						eq_(node.namespace, 'Services.Foos');
						eq_(node.contentType, 'script');
					}
				}
			]
			.forEach(data => {
				var {template, expect} = data;
				var nodes = Mask.parse(template);

				var node = Mask.jmask(nodes).find('import').get(0);
				is_(node, 'Object');
				expect(node);
			})	
		}	
	}
	

})

function parse(template) {
	var imports = Mask.parse(template),
		import_ = imports.nodes[0];

	is_(import_, 'Object', `Not correct parsed ${template}`);
	return import_;
}