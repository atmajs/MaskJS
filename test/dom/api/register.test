UTest({
	'from template' : {
		'define' () {
			var compo = mask.getHandler('FooFromTmpl');
			eq_(compo, null);
			
			mask.registerFromTemplate(`
				define FooFromTmpl {
					h4 > 'FooFromTmpl'
				}
			`)
			
			var compo = mask.getHandler('FooFromTmpl');
			is_(compo, 'Function');
			
			var dom = mask.render('FooFromTmpl');
			return UTest.domtest(dom, `
				find('h4') > text FooFromTmpl;	
			`);
		},
		'let' () {
			'> create owner component'
			var Foo = mask.Compo({});
			mask.registerHandler('Foo', Foo);
			
			'> register from template in the owners scope'
			mask.registerFromTemplate(`
				let LetBaz {
					h4 > 'LetBaz'
				}
			`, Foo);
			
			mask.on('error', assert.await(error => has_(error.message, 'LetBaz')));
			var dom = mask.render(`
				Foo {
					LetBaz;
				}
				LetBaz;
			`);
			mask.off('error');
			return UTest.domtest(dom, `
				find('h4') {
					length 1;
					text LetBaz;
				}
			`);
		}
	}
})