UTest({
	'content' () {
		var template = `Lorem ipsum doler!`;
		var node = Mask.parseHtml(template);
		eq_(node.content, template);
	},
	'node':{
		'single notation' () {
			var template = `<div/>`;
			var node = Mask.parseHtml(template);
			eq_(node.tagName, 'div');
		},
		'open-close notation' () {
			var template = `<div > </div>`;
			var node = Mask.parseHtml(template);
			eq_(node.tagName, 'div');
		},
		'attributes' () {
			[
				`<div id='qux' data-name="foo bar daz" checked='checked'> </div>`,
				`
					<div
						id = 'qux'
						data-name = "foo bar daz"
						checked
					> </div>
				`,
				`
					<div
						checked id = qux
						data-name = 'foo bar daz'
					> </ div >
				`,
			].forEach(str => {
				var node = Mask.parseHtml(str);
				eq_(node.tagName, 'div');
				has_(node.attr, {
					'id': 'qux',
					'data-name': 'foo bar daz',
					'checked': 'checked'
				});
			});
		}
	},
	'children': {
		'text' () {
			var template = `<span>Foo</span>`;
			var node = Mask.parseHtml(template);
			eq_(node.tagName, 'span');
			eq_(node.nodes[0].content, 'Foo');
		},
		'nodes' () {
			var template = `
				<section>
					Lorem <li>ipsum</li> doler
				</section>
			`;
			
			var node = Mask.parseHtml(template);
			eq_(node.tagName, 'section');
			var nodes = node.nodes;
			eq_(nodes.length, 3);
			eq_(nodes[0].content.trim(), 'Lorem');
			eq_(nodes[1].tagName, 'li');
			eq_(nodes[1].nodes[0].content, 'ipsum');
			eq_(nodes[2].content.trim(), 'doler');
		},
		'implies close' () {
			var template = `
				<ul>
					<li>A
					<li><div>B
				</ul>
			`;
			
			var node = Mask.parseHtml(template);
			eq_(node.tagName, 'ul');
			eq_(node.nodes[0].tagName, 'li');
			eq_(node.nodes[0].nodes[0].content.trim(), 'A');
		}
	},
	'expression' () {
		var template = `
			<if expression='foo%2 === 1'>Hello</if>
		`;
		
		var node = Mask.parseHtml(template);
		eq_(node.tagName, 'if');
		eq_(node.expression, 'foo%2 === 1');
		eq_(node.type, mask.Dom.STATEMENT);
		eq_(node.nodes[0].content, 'Hello')
	},
	'parsers': {
		'method' () {
			var template = `
				<mask>
				function foo() {
					var a = 10;
				}
				</mask>
			`;
			
			var node = Mask.parseHtml(template);
			eq_(node.tagName, 'function');
			eq_(node.body.trim(), 'var a = 10;');
		}
	}
})