// workaround - @TODO atma loader import
 io
	.File
	.getHookHandler()
	.register({
		regexp: /js$/,
		method:'read',
		handler: 'importer',
		zIndex: 100
	});

include
	.cfg({
		loader: {
			js: {
				load: function(resource, callback){
					
					callback(resource, io.File.read(resource.url));
				},
				process: function(source){
					return source;
				}
			}
		}
	})
	.inject(
		'/src/scope-vars.js',
		'/src/util/util.js',
		'/src/util/attr.js',
		'/src/util/template.js',
		'/src/util/string.js',
		'/src/util/function.js',
		'/src/util/condition.js',
		
		'/src/custom/exports.js',
		
		'/src/dom/exports.js',
		'/src/parse/parser.js'
	)
	.done(function(){
		
		UTest({
			
			'inline-comment': function(){
				
				var ast = Parser.parse(' //some');
				
				eq(ast instanceof Dom.Fragment, true);
				eq(ast.nodes, null);
				
				
				ast = Parser.parse('div; // comment');
				eq(ast instanceof Dom.Fragment, false);
				eq(ast.tagName, 'div');
				eq(ast.nodes, null);
				
				
				ast = Parser.parse('div; //comment \n\
								   span;');
				
				assert(ast.nodes != null);
				
				eq(ast.nodes.length, 2);
				eq(ast.nodes[1].tagName , 'span');
				
				ast = Parser.parse('div //comment \n\
								   foo=fvalue // comment \n\
								   // x \n\
								   bar=bvalue');
				
				eq(ast.nodes, null);
				eq(ast.tagName, 'div');
				eq(Object.keys(ast.attr).length, 2);
				eq(ast.attr.foo, 'fvalue');
				eq(ast.attr.bar, 'bvalue');
			},
			
			'block-comment': function(){
				
				var ast = Parser.parse(' /* comment */');
				eq(ast instanceof Dom.Fragment, true);
				eq(ast.nodes, null);
				
				ast = Parser.parse('div; /* comment */');
				eq(ast instanceof Dom.Fragment, false);
				eq(ast.tagName, 'div');
				eq(ast.nodes, null);
				
				
				ast = Parser.parse('div; \n\
								   /* \n\
										comment \n\
								   */\n\
								   span;');
				
				assert(ast.nodes != null);
				
				eq(ast.nodes.length, 2);
				eq(ast.nodes[1].tagName , 'span');
				
				ast = Parser.parse('div /*\n\
								   comment \n \
								   1\n \
								   2\n \
								   \n  \
								   */  \
								   foo=fvalue /*\n\
									comment \n\
								   */ \n\
								   bar=bvalue');
				
				eq(ast.nodes, null);
				eq(ast.tagName, 'div');
				eq(Object.keys(ast.attr).length, 2);
				eq(ast.attr.foo, 'fvalue');
				eq(ast.attr.bar, 'bvalue');
				
				ast = Parser.parse('  /*\n\
								   comment \n \
								   1\n \
								   2\n \
								   \n  \
								   */  \
								   div foo=fvalue /*\n\
									comment \n\
								   */ \n\
								   bar=bvalue');
				
				eq(ast.nodes, null);
				eq(ast.tagName, 'div');
				eq(Object.keys(ast.attr).length, 2);
				eq(ast.attr.foo, 'fvalue');
				eq(ast.attr.bar, 'bvalue');
				
			}
		})
	})