UTest({
	'simple' () {
		var a = '@foo',
			b = '@foo { span > "Foo" }'
			;
		
		var tmpl = mask.merge(a, b);
		eq_(tmpl[0].tagName, 'span');
		eq_(tmpl[0].nodes[0].content, 'Foo');
	},
	'should render nested tags' () {
		var a = `
				h4 > span > @title;
				p > @body;
			`,
			b = `
				@title > em > 'Baz'
				@body > section #content;
			`;
		var tmpl = mask.merge(a, b);
		var $dom = $(mask.render(tmpl));
		$dom
			.children('h4')
			.eq_('length', 1)
			.find('span > em')
			.eq_('length', 1)
			.eq_('text', 'Baz');
		
		$dom
			.children('p')
			.eq_('length', 1)
			.children('section#content')
			.eq_('length', 1)
			;
	},
	'should render @else' () {
		var a = `
			div {
				@panel;
				@else {
					h4 > 'Empty'
				}
				@footer;
				@else {
					footer > span > 'Baz'
				}
			}
		`,
			b = '@foo { span > "Foo" }'
			;
		
		var tmpl = mask.merge(a, b);
		var $dom = $(mask.render(tmpl));
		$dom
			.children('h4')
			.eq_('length', 1)
			.eq_('text', 'Empty')
			;
		$dom
			.children('footer')
			.eq_('length', 1)
			.eq_('html', '<span>Baz</span>')
			;
	},
	'should join many' () {
		var a = '.outer > @content';
		var b = '@content > .inner > @title';
		var c = '@title > "Hello"';
		
		var tmpl1 = mask.merge(a, b);
		var tmpl2 = mask.merge(tmpl1, c);
		
		$(mask.render(tmpl2))
			.filter('div.outer')
			.eq_('length', 1)
			.children('div.inner')
			.eq_('length', 1)
			.eq_('html', 'Hello');
	},
	'should render also the inner content' () {
		var a = `
				div > @bazContent {
					h4 > 'Header'
					section > @placeholder;
				}
			`,
			b = '@bazContent > span > "baz"'
			;
		
		var tmpl = mask.merge(a, b);
		var $dom = $(tmpl);
		
		$(mask.render(tmpl))
			.filter('div')
			.eq_('length', 1)
			.children()
			.eq_('length', 2)
			.eq(0)
			.eq_('is', 'h4', true)
			.eq_('html', 'Header')
			.end()
			.eq(1)
			.eq_('is', 'section', true)
			.eq_('html', '<span>baz</span>')
			;
	},
	'should not render the inner content' () {
		var a = `
				div > @bazContent {
					h4 > 'Header'
					section > @placeholder;
				}
			`,
			b = '@fooContent > span > "baz"'
			;
		
		var tmpl = mask.merge(a, b);
		var $dom = $(tmpl);
		$(mask.render(tmpl))
			.filter('div')
			.eq_('length', 1)
			.eq_('html', '')
			;
	},
	'should modify parents tagName' () {
		var a = 'div > @fooContent',
			b = 'p > @fooContent > span > "baz"'
			;
		
		var tmpl = mask.merge(a, b);
		var $dom = $(mask.render(tmpl));
		$dom
			.filter('p')
			.eq_('length', 1)
			.eq_('html', '<span>baz</span>')
			;
	},
	'should modify parents attributes' () {
		var a = '.foo some=true  > @foo',
			b = '.baz some=false > @foo > span > "baz"'
			;
		
		var tmpl = mask.merge(a, b);
		var $dom = $(mask.render(tmpl));
		$dom
			.eq_('attr', 'class', 'baz')
			.eq_('attr', 'some', 'false')
			.eq_('html', '<span>baz</span>')
			;
	}
})