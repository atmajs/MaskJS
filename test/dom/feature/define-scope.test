// use default module loader
mask.config('modules', 'default');

UTest({
	'should create functions with scope for': {
		'!... no imports' () {
			var template = `
				define Foo {
					h4 > '~name'

					function onRenderStart (model) {
						model.name = this.toUpper(model.name);
					}

					function toUpper (str) {
						return str.toUpperCase();
					}	
				}
				Foo;
			`;
			var dom = mask.render(template, { name: 'Hello'});
			$(dom)
				.filter('h4')
				.eq_('length', 1)
				.eq_('text', 'HELLO');
		},
		'... for variables' () {

			var template = `
				define Foo {
					var WIDTH = 10 / 2;

					function onRenderStart () {
						this.width = WIDTH;
					}
				}
			`;

			var Foo = mask.Compo.initialize('Foo');
			eq_(Foo.width, 5);
		},

		'!... for imports' (done) {
			var template = `
				import foo as FooDataObj, foo from '/test/tmpl/modules/data_foo.js';
				import * as BazTxt from '/test/tmpl/modules/baz.txt';
				import * as BazIni from '/test/tmpl/modules/baz.ini' is text;

				define Foo {
					
					function getJsExports_PropAlias () {
						return FooDataObj;
					}
					function getJsExports_Prop () {
						return foo;
					}
					function getTextImport () {
						return BazTxt;
					}
					function getTextAlikeImport () {
						return BazIni;
					}
				}
			`;

			mask.define(template).done(() => {
				var Foo = mask.Compo.initialize('Foo');
				deepEq_(Foo.getJsExports_Prop(), { name: 'Foo'});
				deepEq_(Foo.getJsExports_PropAlias(), { name: 'Foo'});
				eq_(Foo.getTextImport(), 'Hello foo baz!');
				eq_(Foo.getTextAlikeImport(), 'name=Baz');
				done();
			});

		}
	},
});

// vim: set ft=js: