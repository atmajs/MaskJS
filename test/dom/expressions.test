var Expression = mask.Utils.Expression,
	$eval = Expression.eval,
	$refs = Expression.varRefs,
	$parse = Expression.parse,
	template, node, attr;


function expression(expr, result, model, ctx, controller) {
	if (expr instanceof Array) {
		for (var i = 0, x, length = expr.length; i < length; i++) {
			x = expr[i];
			expression(x, result, model, ctx, controller);
		}
		return;
	}

	var ast = Expression.parse(expr),
		value = Expression.eval(ast, model, ctx, controller);

	assert.equal(value, result, 'Unexpected Result (' + expr + ')');
}


UTest({
	$config: {
		breakOnError: true
	},
	'concat': function() {
		expression([ //
		'5+"hello"', //
		' 5 + "hello"', //
		' 5 + "hello" + ""', //
		'"" + 5 + "hello"', //
		"'' + 5 + 'hello'", "'' + 5 + 'h' + 'e' + \"l\" + 'l' + 'o'", "'' + ('5' + 'h' + 'e') + (\"l\" + 'l' + 'o')", //
		"'' + ('5' + ('h' + 'e') + (\"l\" ) +  'l' + 'o')", //
		"5 + fn()", //
		"5 + $c.parent.fn2()", 
		"5 + $c.closest(':test').value",
		"5 + var_", //
		"1 + 2*2 + var_"], '5hello', {
			var_: "hello",
			fn: function() {
				return "hello";
			}
		}, null, {
			parent: {
				fn2: function() {
					return "hello"
				},
				
				compoName: ':test',
				value: 'hello'
			}
		});
	},
	'math': function() {
		expression([ //
		'10', //
		'5+5', //
		'6+1+3', //
		'1 + 2 * 2 + 1 * 5',
		'15-5', //
		'5*2', //
		'20/2', //
		'2*(2+3)', //
		'2+2*4', //
		'3 * (2+3) - 5', //
		'(5*1)*1/5+9', //
		'(5 * 1) * 1 / 5 +   9 ', //
		'(((5 / 1) / 1) / 5) +   9 ', //
		'((((5 / 1) / 1) / 5) +   9 )', //
		'(5 * 1) * 1 / 5 + 1 + (4 * 2)', //
		'-(-10)',
		'23%13'], 10);

		expression(['a + b+b', //
		'_c*c3+4+a', //
		'fn(5)', //
		'fn(3) + fn(2)', //
		'fn(3) + fn(1) +fn(1)', //
		'fn(3,4) + fn(4,3) + fn(2,-2)', //
		], 20, {
			a: 10,
			b: 5,
			_c: 2,
			c3: 3,
			fn: function(n, x) {
				return n * (x || 4);
			}
		});

	},
	'condition': function() {
		expression([ //
		'5==5', //
		'6!=5', //
		'3>2', //
		'2>=2', //
		'3>=2', //
		'2<3', //
		'2<=3', //
		'3<=3', //
		'0.01 == 0.01 + ""', //
		'0.01 === 0.01', //
		'3<=3 && "a"=="a"', //
		'3<=3 && "a"!="b"', //
		'3<=3 && "a"==="a"', //
		'3<=3 && "a"!=="b"', //
		'3==3 && 2 != 5 || 1==0', //
		'3==3 && 2 == 5 || 0.5==.5', //

		'name=="A" && number == 10', //
		'a == b + b', //
		'a + 5 + .5 + .5 == b * 3 + 1', //
		'!(false)', //
		'!0', //
		'a == b || !(a==5) ', //
		'!!true', //
		'!null', //
		], true, {
			name: 'A',
			number: 10,
			a: 10,
			b: 5
		});
		
		expression([ //
		'5==6', //
		'6==5', //
		'3<2', //
		'2>2', //
		'3<=2', //
		'2>3', //
		'2>=3', //
		'3<3', //
		'0.01 === 0.01 + ""', //
		'a === "10"', //
		'a + 5 == b * 3 + 1', //
		'!(true)', //
		'0', //
		'a == b || a==5 ', //
		'a == b && !(a==5) ', //
		'!!false', //
		'!!null', //
		], false, {
			name: 'A',
			number: 10,
			a: 10,
			b: 5
		});
	},
	'ternary': function() {
		expression([
		'enabled?"enabled":"0"',
		' enabled ? "ena" + "bled" : 0',
		' 1 ? "enabled" : 0',
		' !((0 + 1) * 2 - 2) ? "enabled" : 0',
		' 2 ? var_ : 0',
		], 'enabled', {
			enabled: true,
			var_: 'enabled'
		});
	},
	
	'OR': function(){
		expression([
			'a || b',
			'."some-key" || b',
			'false || (b && a)',
			'true && 1'
		], '1', {
			a: 1,
			b: 2,
			'some-key': 1
		});
	},
	
	'extractVars': function(){
		eq_($refs('x'),'x');
		deepEq_($refs('x + fn(a.b.c)'),['x','a.b.c']);
		
		deepEq_($refs('(var * var2 / (1 - same)) + object.fn(a.b.c)'),
			[
				'var',
				'var2',
				'same',
				'a.b.c',
				'object'
			]
		);
		
		
		var obj = {
			fn: function(){
				return {
					model: 'yeap'
				};
			}
		},
		refs;
		
		obj.prop = obj;
		
		refs = $refs('fn().model');
		eq_(refs.ref, 'model');
		deepEq($eval(refs.accessor, obj), {model: 'yeap'});
		
		refs = $refs('x + prop.fn().model');
		
		eq(refs[0], 'x');
		eq(refs[1], 'prop');
		eq(refs[2].ref, 'model');
		deepEq($eval(refs[2].accessor, obj), {model: 'yeap'});
	},
	
	'accessors': function(){
		expression([
			'(a).foo.length',
			'a.foo.length',
			'a.foo["0"]',
			'a.foo[0]',
			'a["foo"].length',
			'a[key].length',
			'a["f" + "o" + \'o\'].length',
			'a[key][0]',
			"a['foo'][1][2]",
		], 2, {
			a: { foo: [2,'st2ring'] },
			key: 'foo'
		});
	},
	
	'array': function(){
		deepEq_($eval('[("b" + "a" + "z")]'), [
			'baz'
		]);
		
		deepEq_($eval('[1,2,"4", true, 5.5, [1]]'), [
			1, 2, '4', true, 5.5, [1]
		]);
		
		deepEq_($eval('[[foo[a], foo.prop[0]], ("ba" + "z")]', {
			foo: { prop: 'x-foo' },
			a: 'prop'
		}), [
			['x-foo', 'x'], ['baz']
		]);
	},
	
	'early exit': (function(){
		function check(data){
			var str = data.str,
				model = data.model,
				expect = data.expect,
				rest = data.rest;
			var tuple = $parse(str, true);
			deepEq_($eval(tuple[0], model), expect);
			eq_(str.substring(tuple[1]), rest);
		}
		return {
			'array': function(){
				check({
					str: '[1] baz',
					expect: [ 1 ],
					rest: 'baz'
				});
			},
			'object': function(){
				check({
					str: '{ some: prop }; Foo',
					model: { prop: 10 },
					expect: { some: 10 },
					rest: '; Foo'
				});
			},
			'statement': function(){
				check({
					str: 'a + 10 - 5 Hello',
					model: {
						a: 5
					},
					expect: 10,
					rest: 'Hello'
				});
			}
		}
	}()),
	
	'object': function(){
		deepEq_($eval("{}"), {});
		deepEq_($eval("{ foo: 'baz'}"), { foo: 'baz' });
		deepEq_($eval("{ foo: prop, 'val': 5.5, }", { prop: 'baz'}),
			{
				foo: 'baz',
				val: 5.5
			}
		);
	},
	
	'predefined accessors': function(){
		expression([ 
		'$c.three * 3 - 5',
		'$ctx.number.two - two + 4',
		'0 + $a.four - 0',
		'$c.attr.four + two - $c.three + 1'
		], 4, {
			two: 2
		}, {
			number: {
				two: 2
			}
		}, {
			three: 3,
			attr: {
				four: 4
			}
		});
	},
	
	'controller scope accessors': function(){
		
		expression(
			[
				'a + b.sub'
			],
			5,
			null,
			null,
			{
				scope: {
					a: 2
				},
				parent: {
					scope: {
						b: {
							sub: 3
						}
					}
				}
			}
		);
	}
});
