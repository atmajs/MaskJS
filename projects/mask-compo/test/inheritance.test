UTest({
	'simple object inheritance': function(){
		var A = {
			a: 'a',
			getA: function(){ return this.a; },
			get: function(){ return this.a; },
			attr: {
				xA: 'a'
			}
		};
		var Ctor = Compo(A, {
			b: 'b',
			get: function(){
				return this.b + this.super();
			},
			attr: {
				xB: 'b'
			}
		});
		
		var x = new Ctor;
		has_(x, {
			a: 'a',
			b: 'b'
		});
		
		has_(x.attr, {
			xA: 'a',
			xB: 'b'
		});
		
		is_(x.getA, 'Function');
		is_(x.get, 'Function');
		eq_(x.get(), 'ba');
	},
	'deep function inheritance': function(){
		var A = {
			name: 'a',
			get: function(){
				return 'a';
			}
		};
		var B = {
			name: 'b',
			get: function(){
				return 'b' + this.super();
			}
		};
		var C = {
			name: 'c',
			get: function(){
				return 'c' + this.super();
			}
		};
		
		var foo = new (Compo(A, B, C, {
			get: function(){
				return 'd' + this.super();
			}
		}));
		
		eq_(foo.name, 'c');
		eq_(foo.get(), 'dcba');
	},
	'should inherit component attributes and methods': function(){
		var A = Compo({
			foo: function(){
				return 'foo'
			},
			attr: {
				a: '~[name]'
			}
		});
		var B = Compo(A, {
			foo: function(){
				return 'foo' + this.super()
			},
			attr: {
				b: '~[name]'
			}
		});
		
		var b = new B;
		
		is_(b.foo, 'Function');
		eq_(b.foo(), 'foofoo');
		is_(b.attr.b, 'Function');
		is_(b.attr.a, 'Function');
	},
	'should inherit model': {
		'inherit properties' () {
			var A = {
				model: {
					a: new Date(2017, 1, 1)
				}
			};
			var B = Compo(A, {
				model: {
					b: new Date(2018, 1, 1)
				}
			});
			var b = new B;
			eq_(b.model.a.getFullYear(), 2017);
			eq_(b.model.b.getFullYear(), 2018);
		},
		'use instance' () {
			var A = {
				model: new Date(2017, 1, 1)
			};
			var B = Compo(A, {});
			var b = new B;
			is_(b.model.getFullYear, 'Function');
			eq_(b.model.getFullYear(), 2017);
		},
	},
	
	'should inherit component constructors': function(){
		var A = Compo({
			name: '_',
			constructor: function(x){
				this.name += x + 'A';
			}
		});
		var B = function(x){
			this.name += x + 'B';
		};
		var C = Compo(A, B, {
			constructor: function(x){
				this.name += x + 'C';
			}
		});
		
		var c = new C('-');
		eq_(c.name, '_-A-B-C');
	},
	'inherit templates': {
		'merge `template` properties': function(){
			var A = Compo({
				template: 'section > span > @body'
			});
			var B = Compo(A, {
				template: '@body > em > "B"'
			});
			mask.registerHandler('b', B);
			
			var dom = mask.render('b');
			return UTest.domtest(dom, `
				filter (section) > find ('span > em') {
					text B;
				}
			`);
		},
		'merge `template` with default `nodes`' () {
			mask.registerHandler('foo', Compo({
				template: 'section > @body;'
			}))
			mask.registerHandler('bar', Compo('foo', {
				nodes: mask.parse('@body > em > "Hello"')
			}));
			
			return UTest.domtest(mask.render('bar'), `
				find('section') {
					html ('<em>Hello</em>');
				}
			`);
		},
		'merge `template` with inlined `nodes`' () {
			mask.registerHandler('foo', Compo({
				template: 'section > @body;'
			}))
			mask.registerHandler('bar', Compo('foo', {
				name: 'Baz'
			}));
			
			return UTest.domtest(mask.render(`
				bar > @body > span > '~[this.name]'
			`), `
				find('section') {
					html ('<span>Baz</span>');
				}
			`);
		}
	},
	'should call the onRenderStart/onRenderEnd functions': function(){
		mask.registerHandler('foo', Compo({
			onRenderStart: function(){
				this.start = [1];
			},
			onRenderEnd: function(){
				this.end = [1];
			},
		}))
		mask.registerHandler('bar', Compo('foo', {
			onRenderStart: function(){
				this.start.push(2);
			},
			onRenderEnd: function(){
				this.end.push(2);
			}
		}));
		var compo = Compo.initialize('bar');
		deepEq_(compo.start, [1, 2])
		deepEq_(compo.end,   [1, 2])
	},
	'should call SLOT functions': function(){
		mask.registerHandler('foo', Compo({
			slots: {
				test: function(){
					this.slots = [1];
				}
			}
		}))
		mask.registerHandler('bar', Compo('foo', {
			slots: {
				test: function(){
					this.slots.push(2);
				}
			}
		}));
		var compo = Compo.initialize('bar');
		compo.emitIn('test');
		deepEq_(compo.slots, [1, 2]);
	},
	'should call PIPE functions': function(){
		mask.registerHandler('foo', Compo({
			pipes: {
				app:{
					test: function(){
						this.test = [1];
					}
				}
			}
		}))
		mask.registerHandler('bar', Compo('foo', {
			pipes: {
				app:{
					test: function(){
						this.test.push(2)
					}
				}
			}
		}));
		var compo = Compo.initialize('bar');
		Compo.pipe('app').emit('test');
		deepEq_(compo.test, [1, 2]);
	},
	'should inherit es6 classes or babel transformations' () {
		class Foo {
			constructor () {
				this.test = 'me';
			}
		}
		var Bar = Compo(Foo, { get () { return this.test }});
		mask.define('Bar', Bar);
		var compo = Compo.initialize('Bar');

		eq_(compo.get(), 'me');
	}
})