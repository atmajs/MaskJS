UTest({
	'should define the component' () {
		var template = `
			define foo {
				h4 > 'FooContent'
				span > 'A'
			}
			// tmpl
			
			div > foo;
		`;
		var $div = $(mask.render(template).firstChild);
		$div
			.eq_('prop', 'tagName', 'DIV')
			.children()
			.eq_('length', 2)
			.eq(0)
			.eq_('prop', 'tagName', 'H4')
			.eq_('html','FooContent')
			.end()
			.eq(1)
			.eq_('prop', 'tagName', 'SPAN')
			.eq_('html','A')
			;
	},
	'should merge contents' () {
		var template = `
			define foo {
				h4 > '~[: $a.text]'
				section > @xContent;
			}
			div > foo text='FooText' {
				@xContent > 'BazContent'
			}
		`;
		var $div = $(mask.render(template).firstChild);
		$div
			.eq_('prop', 'tagName', 'DIV')
			.children()
			.eq_('length', 2)
			.eq(0)
			.eq_('prop', 'tagName', 'H4')
			.eq_('html', 'FooText')
			.end()
			.eq(1)
			.eq_('prop', 'tagName', 'SECTION')
			.eq_('html', 'BazContent');
			;
	},
	'should call onRenderStart' () {
		var template = `
			define foo {
				function onRenderStart(model) {
					eq_(model.name, 'Foo');
					this.parent.count = this.parent.count == null
						? 1
						: ++this.parent.count
						;
				}
			}
			foo;
			foo;
		`;
		
		var app = mask.Compo.initialize(template, { name: 'Foo' });
		var Foo = mask.getHandler('foo');
		is_(Foo.prototype.onRenderStart, 'Function');
		
		eq_(app.components.length, 3);
		eq_(app.count, 2);
	},
	'should define a function' () {
		var template = `
			define foo {
				function fooBar() {
					return 'hello';
				}
				h4 > 'Foo'
			}
			foo;
		`;
		
		var app = mask.Compo.initialize(template, { name: 'Foo' });
		app.$.has_('h4');
		eq_(app.find('foo').fooBar(), 'hello');
	},
	
})