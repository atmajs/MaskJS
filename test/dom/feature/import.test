UTest({
	'parser': {
		'all' () {
			var imports = mask.parse(`
				import * as foo3 from '/test/tmpl/a.mask';
				foo3;
			`);
			eq_(imports.tagName, 'imports');
			
			var node = imports.nodes[0];
			has_(node, {
				tagName: 'import',
				path: '/test/tmpl/a.mask',
				alias: 'foo3'
			});
		},
		'compos' () {
			var imports = mask.parse(`
				import foo as baz3 from '/test/tmpl/a.mask';
				baz3;
			`);
			eq_(imports.tagName, 'imports');

			var node = imports.nodes[0];
			has_(node, {
				tagName: 'import',
				path: '/test/tmpl/a.mask',
				exports: [
					{
						name: 'foo',
						alias: 'baz3'
					}
				]
			});
		},
		'generic path' () {
			var imports = mask.parse(`
				import foo3 from 'compo/bar';
				baz3;
			`);
			eq_(imports.tagName, 'imports');
			
			var node = imports.nodes[0];
			has_(node, {
				tagName: 'import',
				path: 'compo/bar',
				exports: [{
					name: 'foo3'
				}]
			});
		},
		'include' () {
			var imports = mask.parse(`
				import from 'compo/bar';
			`);
			eq_(imports.tagName, 'imports');
			
			var node = imports.nodes[0];
			has_(node, {
				tagName: 'import',
				path: 'compo/bar'
			});
		},
		'template with nodes' () {
			var imports = mask.parse(`
				import h4 as b_nest from 'nest-b';
				section {
					span > 'H4'
				}
			`);
			
			has_(imports.nodes[0], {
				tagName: 'import',
				path: 'nest-b',
				exports: [{
					name: 'h4',
					alias: 'b_nest'
				}]
			});
			has_(imports.nodes[1], {
				tagName: 'section'
			});
		}
	},
	'serialize': {
		'all as alias' () {
			var tmpl = "import * as A from 'compo/bar';";
			var ast = mask.parse(tmpl);
			var str = mask.stringify(ast);
			
			eq_(tmpl, str);
		},
		'embed' () {
			var tmpl = "import from 'compo/bar';";
			var ast = mask.parse(tmpl);
			var str = mask.stringify(ast);
			
			eq_(tmpl, str);
		},
		'export' () {
			var tmpl = "import A from 'compo/bar';";
			var ast = mask.parse(tmpl);
			var str = mask.stringify(ast);
			
			eq_(tmpl, str);
		},
		'export as' () {
			var tmpl = "import A as B from 'compo/bar';";
			var ast = mask.parse(tmpl);
			var str = mask.stringify(ast);
			
			eq_(tmpl, str);
		},
		'exports' () {
			var tmpl = "import A, B from 'compo/bar';";
			var ast = mask.parse(tmpl);
			var str = mask.stringify(ast);
			
			eq_(tmpl, str);
		},
		'exports many' () {
			var tmpl = "import A as a, B, C as c from 'compo/bar.mask';";
			var ast = mask.parse(tmpl);
			var str = mask.stringify(ast);
			
			eq_(tmpl, str);
		}
	},
	'render': {
		'all' (done) {
			mask
				.renderAsync(`
					import * as foo1 from '/test/tmpl/modules/h4.mask';
					foo1;
				`)
				.done(assert.await(function(dom){
					$(dom).has_('h4');
					done();
				}));
		},
		'selector' (done) {
			mask
				.renderAsync(`
					import header as foo2 from '/test/tmpl/modules/header_content.mask';
					foo2;
				`)
				.done(assert.await(function(dom){
					$(dom).has_('header');
					$(dom).hasNot_('.content');
					done();
				}))
		},
		'deep nesting' (done) {
			mask
				.renderAsync(`
					import * as :nest from '/test/tmpl/modules/nest.mask';
					:nest;
				`)
				.done(assert.await(function(dom){
					$(dom)
						.has_('section.a')
						.has_('h4.b');
					done();
				}))
		},
		'include' (done) {
			mask
				.renderAsync(`
					import from '/test/tmpl/modules/h4.mask';
				`)
				.done(assert.await(function(dom){
					
					$(dom)
						.has_('h4')
						.eq_('text', 'a');
					done();
				}))
		},
		'errored' (done) {
			mask
				.renderAsync(`
					import from '/none.mask';
				`)
				.done(assert.await(function(dom){
					$(dom)
						.has_('text', 'Resource: /none.mask; Status: 404');
					done();
				}))
		},
		'defines' (done) {
			mask
				.renderAsync(`
					import :menu, :footer from '/test/tmpl/modules/defines';
					
					h4 > :menu;
					div > :footer;
				`)
				.done(assert.await(function(dom){
					UTest
						.domtest(dom, `
							filter('h4') > text Home;
							filter('div') > text Copyright;
						`)
						.done(done);
				}));
		},
		'scripts': {
			'load property' (done) {
				mask.renderAsync(`
					import foo from '/test/tmpl/modules/data.js';
					h4 > '~[foo.name]';
				`)
				.done(assert.await(function(dom) {
					UTest
							.domtest(dom, `
								filter('h4') > text Baz;
							`)
							.always(done);
				}));
			},
			'load full' (done) {
				mask.renderAsync(`
					import * as x from '/test/tmpl/modules/data.js';
					h4 > '~[x.foo.name]';
				`)
				.done(assert.await(function(dom) {
					UTest
							.domtest(dom, `
								filter('h4') > text Baz;
							`)
							.always(done);
				}));
			},
			'extending `define`' (done) {
				mask.renderAsync(`
					import * as X from '/test/tmpl/modules/data.js';
					define Bar extends X {
						h4 > '~[:$c.foo.name]'
					}
					Bar;
				`)
				.done(assert.await(function(dom) {
					UTest
						.domtest(dom, `
							filter('h4') > text Baz;
						`)
						.always(done);
				}));
			},
			'extending `define` with imported handler' (done) {
				mask.renderAsync(`
					import * as X from '/test/tmpl/modules/data.js';
					define Bar extends X.foo {
						h4 > '~[:$c.name]'
					}
					Bar;
				`)
				.done(assert.await(function(dom) {
					UTest
						.domtest(dom, `
							filter('h4') > text Baz;
						`)
						.always(done);
				}));
			},
			
			'load package with embedded modules' (done) {
				mask.renderAsync(`
					import * as Y from '/test/tmpl/modules/package';
					
					p > Y;
				`, { name: 'Baz' })
				.done(assert.await(function(dom) {
					UTest
						.domtest(dom, `
							filter('p') {
								has h4;
								text Baz;
							}
						`)
						.always(done);
				}));
			}
		}
		
	}
	
})