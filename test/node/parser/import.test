UTest({
	'exports': {
		'should parse export' () {
			var import_ = parse(`
					import :a, B , c	, _d,  _d1 ,$j from "/ foo "
			`);
			eq_(import_.path, '/ foo ');
			has_(import_.exports, [
				{
					name: ':a'
				},
				{
					name: 'B'
				},
				{
					name: 'c'
				},
				{
					name: '_d'
				},
				{
					name: '_d1'
				},
				{
					name: '$j'
				},
			]);
		},
		'should parse export with newlines' () {
			var import_ = parse(`
				import
					Foo,
					Baz
				from "foo";
			`);
			has(import_.exports, [
				{ name: 'Foo' },
				{ name: 'Baz' },
			])
		}
	},
	'as content type' () {
		var import_ = parse('import from "baz" is script;');
		has_(import_, {
			path: 'baz',
			contentType: 'script'
		});
	},
	'serializations' () {
		[
			{
				template: "import Foo from 'foo';"
			},
			{
				template: "import Foo as Baz from 'foo';"
			},
			{
				template: "import Foo as Baz, Qux as q, T from 'foo';"
			},
			{
				template: "import from '/foo/test';"
			},
			{
				template: "import * as X from '/foo/test';"
			},
			{
				template: "import * as X from '/foo/test' is mask;"
			},
		]
		.forEach(data => {
			var {template} = data;
			var nodes = Mask.parse(template);
			var str = Mask.stringify(nodes);
			eq_(str, template);
		})
	},
	'should parse `async` keyword' () {
		[
			{
				template: "import async Foo from 'foo';"
			},
			{
				template: "import async Foo as Baz from 'foo';"
			},
			{
				template: "import async Foo as Baz, Qux as q, T from 'foo';"
			},
			{
				template: "import async * as X from '/foo/test';"
			},
			{
				template: "import async * as X from '/foo/test' is mask;"
			},
		]
		.forEach(data => {
			var {template} = data;
			var nodes = Mask.parse(template);
			var str = Mask.stringify(nodes);
			eq_(str, template);
		})
	}
})

function parse(template) {
	var imports = Mask.parse(template),
		import_ = imports.nodes[0];

	is_(import_, 'Object', `Not correct parsed ${template}`);
	return import_;
}