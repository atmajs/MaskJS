// use default module loader
mask.config('modules', 'default');

UTest({
	'!should load default file in node_modules' () {
		return mask
				.renderAsync(`
					import Foo from '/test/tmpl/npm/foo.mask';
					
					Foo;
				`)
				.then(dom => {
					return UTest.domtest(dom, `
						find ('h4') > text ('EmptyPackage');
					`);
				});
	},
	'render': {
		'get all' () {
			return mask
				.renderAsync(`
					import * as foo1 from '/test/tmpl/modules/h4.mask';
					foo1;
				`)
				.done(dom => {
					$(dom).has_('h4');
				});
		},
		'get mask node' () {
			return mask
				.renderAsync(`
					import header as foo2 from '/test/tmpl/modules/header_content.mask';
					foo2;
				`)
				.done(dom => {
					$(dom).has_('header');
					$(dom).hasNot_('.content');
				})
		},
		'deep nesting' () {
			return mask
				.renderAsync(`
					import * as :nest from '/test/tmpl/modules/nest.mask';
					:nest;
				`)
				.pipe(dom => {

					return UTest.domtest(dom, `
						find ('section.a');
						find ('h4.b');
						find ('h4.a');
					`);
				});
		},
		'embed' () {
			return mask
				.renderAsync(`
					import from '/test/tmpl/modules/h4.mask';
				`)
				.done(dom => {
					$(dom)
						.has_('h4')
						.eq_('text', 'a');
				});
		},
		'errored' () {
			return mask
				.renderAsync(`
					import from '/none.mask';
				`)
				.pipe(dom => {
					$(dom).has_('text', 'Load error: http://localhost:5777/utest/none.mask; Status: 404');
				});
		},
		'defines': {
			'should render simple defines' () {
				return mask
					.renderAsync(`
						import :menu, :footer from '/test/tmpl/modules/defines';

						h4 > :menu;
						div > :footer;
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Home;
							filter('div') > text Copyright;
						`);
					});
			},
			'should render define with inner `let` scope' () {
				return mask
					.renderAsync(`
						import FooScoped from '/test/tmpl/modules/defines_scopes';
						FooScoped;
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							find('.inner') > text Inner;
							find('menu') > text Home;
							find('footer') > text Copyright;
						`);
					});
			},
			'export nodes with iid defines' () {
				return mask
					.renderAsync(`
						import * as IiTest from '/test/tmpl/modules/ImmediateInvokeDefine';
						IiTest;
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Hello;
						`);
					});
			},
		},
		'scripts': {
			'load property' () {
				return mask
					.renderAsync(`
						import foo from '/test/tmpl/modules/data_foo.js';
						h4 > '~[foo.name]';
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Foo;
						`);
					});
			},
			'load full' () {
				return mask
					.renderAsync(`
						import * as x from '/test/tmpl/modules/data_foo.js';
						h4 > '~[x.foo.name]';
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Foo;
						`);
					});
			},
			'extending `define`' () {
				return mask
					.renderAsync(`
						import * as X from '/test/tmpl/modules/data_foo.js';
						define Bar extends X {
							h4 > '~[:$.foo.name]'
						}
						Bar;
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Foo;
						`);
					});
			},
			'extending `define` with imported handler' () {
				return mask
					.renderAsync(`
						import * as X from '/test/tmpl/modules/data_foo.js';
						define Bar extends X.foo {
							h4 > '~[:$.name]'
						}
						Bar;
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Foo;
						`);
					});
			},
		},

		'data':{
			'load json properties' () {
				return mask
					.renderAsync(`
						import baz from '/test/tmpl/modules/data_baz.json';
						h4 > '~[baz.name]';
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text Baz;
						`);
					});
			},
		},

		'html': {
			'load html template' () {
				return mask
					.renderAsync(`
						import * as MyHeader from '/test/tmpl/modules/html/header.html';
						MyHeader;
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('header') > text Foo;
						`);
					});
			}
		},

		'packages': {
			'load package with embedded modules' () {
				return mask
					.renderAsync(`
						import * as Y from '/test/tmpl/modules/package';

						p > Y;
					`, { name: 'Foo' })
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('p') {
								has h4;
								text Foo;
							}
						`);
					});
			},

			'embed model template' () {
				return mask
					.renderAsync('import from "/test/tmpl/modules/model"')
					.pipe(dom => UTest.domtest(dom, `
						find ('h4') {
							text a;
						}
						find ('.foo') {
							text Foo;
						}
						find ('.baz') {
							text Baz;
						}
					`));
			},
			'repeat embedding' () {
				return mask
					.renderAsync('import from "/test/tmpl/modules/model"')
					.pipe(dom => UTest.domtest(dom, `
						find ('h4') {
							text a;
						}
						find ('.foo') {
							text Foo;
						}
						find ('.baz') {
							text Baz;
						}
					`));
			},
			'load model template' () {
				return mask
					.renderAsync('import * as X from "/test/tmpl/modules/model"; X;')
					.pipe(dom => UTest.domtest(dom, `
						find ('h4') {
							text a;
						}
						find ('.foo') {
							text Foo;
						}
						find ('.baz') {
							text Baz;
						}
					`));
			}
		},

		'plain': {
			'load text content by extension and explicit by type' () {
				return mask
					.renderAsync(`
						import * as baz from '/test/tmpl/modules/baz.txt';
						import * as bazIni from '/test/tmpl/modules/baz.ini' is text;
						h4 > '~baz';
						h3 > '~bazIni';
					`)
					.pipe(dom => {
						return UTest.domtest(dom, `
							filter('h4') > text ('Hello foo baz!');
							filter('h3') > text ('name=Baz');
						`);
					});
			},
		},

		//< packages

		'version' () {
			mask.Module.cfg('version', 'fooVer');
			var spy = sinon.spy(XMLHttpRequest.prototype, 'open');
			return mask
					.renderAsync('import from "/test/tmpl/modules/versioned";')
					.pipe(dom => {
						$(dom).has_('section');

						eq_(spy.callCount, 1);
						var args = spy.args[0];
						var url = args[1];

						has_(url, 'v=fooVer');
						XMLHttpRequest.prototype.open.restore();
						mask.Module.cfg('version', null);
					});
		},

		'resources without extensions' () {
			return mask
					.renderAsync(`
						import * as data from '/test/tmpl/modules/ext-less/myinfo' is json;
						import meta from '/test/tmpl/modules/ext-less/mymeta' is js;
						.json > '~[$scope.data.name]'
						.js > '~[$scope.meta.name]'

					`, { name: 'Foo' })
					.pipe(dom => {
						return UTest.domtest(dom, `
							find('.json') > text myinfo;
							find('.js')   > text mymeta;
						`);
					});
		}
	}, //< render

})

// vim: set ft=js: