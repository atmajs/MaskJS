UTest({
	$before () {
		mask.define('JustAContainer', Compo());
	},
	'function node' () {
		var dom = mask.render(`
			JustAContainer {
				function doChange() {
					this.$.text('B');
				}
				slot change () {
					this.doChange();
				}
				
				button x-tap='change' > 'A'
			}
		`);		
		return UTest.domtest(dom, `
			with ('button') {
				text A;
				click;
				text B;
			}
		`);
	},
	'serialization' () {
		var tmpl = `
			JustAContainer {
				function doChange() {
					this.$.text('B');
				}
				function onRenderStart (model, ctx,  container ) {
					return new Promise(resolve => {
						setTimeout(resolve, 1000);
					});
				}
				button > 'A'
			}
		`;
		var str = mask.stringify(mask.parse(tmpl), 4);
		var clean = txt => txt.replace(/\s/g, '');

		eq_(clean(str), clean(tmpl));
	},
	'should preprocess script' () {
		var tmpl = `
			JustAContainer {
				slot change () {
					this.$.text('B');
				}
				button x-tap = change > 'A'
			}			
		`;
		
		mask.cfg('preprocessor.script', function(body){
			return body.replace('B', 'C');
		});
		return UTest
			.domtest(mask.render(tmpl), `
				find (button) {
					text A;
					do click;
					text C;
				}
			`)
			.always(() => mask.cfg('preprocessor.script', null))
			;
	}
});

// vim: set ft=js: