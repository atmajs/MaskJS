UTest({
	'simple - check mask nodes' () {
		var a = '@foo',
			b = '@foo { span > "Foo" }'
			;
			
		var tmpl = mask.merge(a, b);
		eq_(tmpl[0].tagName, 'span');
		eq_(tmpl[0].nodes[0].content, 'Foo');
	},
	'should render nested tags' () {
		var a = `
				h4 > span > @title;
				p > @body;
			`,
			b = `
				@title > em > 'Baz'
				@body > section #content;
			`;
		var $dom = $render(a, b);
		$dom
			.filter('h4')
			.eq_('length', 1)
			.find('span > em')
			.eq_('length', 1)
			.eq_('text', 'Baz');
		
		$dom
			.filter('p')
			.eq_('length', 1)
			.children('section#content')
			.eq_('length', 1)
			;
	},
	'should render @else' () {
		var a = `
			div {
				@panel;
				@else {
					h4 > 'Empty'
				}
				@footer;
				@else {
					footer > span > 'Baz'
				}
			}
		`,
			b = '@foo { span > "Foo" }'
			;
		
		var $dom = $render(a, b);
		$dom
			.children('h4')
			.eq_('length', 1)
			.eq_('text', 'Empty')
			;
		$dom
			.children('footer')
			.eq_('length', 1)
			.eq_('html', '<span>Baz</span>')
			;
	},
	'should join many' () {
		var a = '.outer > @content';
		var b = '@content > .inner > @title';
		var c = '@title > "Hello"';
		
		var tmpl1 = mask.merge(a, b);
		var dom = $render(tmpl1, c);
		dom
			.filter('div.outer')
			.eq_('length', 1)
			.children('div.inner')
			.eq_('length', 1)
			.eq_('html', 'Hello');
	},
	'should render also the inner content' () {
		var a = `
				div > @bazContent {
					h4 > 'Header'
					section > @placeholder;
				}
			`,
			b = '@bazContent > span > "baz"'
			;
		
		var dom = $render(a, b);
		dom
			.filter('div')
			.eq_('length', 1)
			.children()
			.eq_('length', 2)
			.eq(0)
			.eq_('is', 'h4', true)
			.eq_('html', 'Header')
			.end()
			.eq(1)
			.eq_('is', 'section', true)
			.eq_('html', '<span>baz</span>')
			;
	},
	'should not render the inner content' () {
		var a = `
				div > @bazContent {
					h4 > 'Header'
					section > @placeholder;
				}
			`,
			b = '@fooContent > span > "baz"'
			;
		
		var dom = $render(a, b);
		dom
			.filter('div')
			.eq_('length', 1)
			.eq_('html', '')
			;
	},
	'should modify parents tagName' () {
		var a = 'div > @fooContent',
			b = 'p > @fooContent > span > "baz"'
			;
		
		var tmpl = mask.merge(a, b);
		var dom = $(mask.render(tmpl));
		dom
			.filter('p')
			.eq_('length', 1)
			.eq_('html', '<span>baz</span>')
			;
	},
	'should modify parents attributes' () {
		var a = '.foo some=true  > @foo',
			b = '.baz some=false > @foo > span > "baz"'
			;
		
		var dom = $render(a, b);
		dom
			.eq_('attr', 'class', 'baz')
			.eq_('attr', 'some', 'false')
			.eq_('html', '<span>baz</span>')
			;
	},
	'should join middle nodes' () {
		var a = jmask('test { some; span > div > @fooContent; }').find('div').get(0),
			b = jmask('span { some; p > @fooContent > span > "baz" }').find('p').get(0)
			;
		var tmpl = mask.merge(a, b);
		var dom = $(mask.render(tmpl));
		dom
			.filter('p')
			.eq_('length', 1)
			.eq_('html', '<span>baz</span>')
			;
	},
	'should join children' () {
		var a = mask.parse(`
				stub {
					h4 > '-h4-'
					section > @xContent;
				}
			`);
		
		var b = mask.parse(`
				stub {
					@xContent > 'BazContent'
				}
			`);
		var dom = $render(a.nodes, b.nodes);
		dom
			.eq_('length', 2)
			.eq(0)
			.eq_('prop', 'tagName', 'H4')
			.eq_('html', '-h4-')
			.end()
			.eq(1)
			.eq_('prop', 'tagName', 'SECTION')
			.eq_('html', 'BazContent')
			;
	},
	'should insert attribute value' () {
		var b = "@foo name=myFoo > br";
		
		[
			"@foo > div name='@foo.attr.name' > @placeholder;",
			"@foo > div name='@attr.name' > @placeholder",
			"div name='@foo.attr.name' > br; span;"
		].forEach(a => {
			var dom = $render(a, b)
			dom
				.eq_('prop', 'tagName', 'DIV')
				.eq_('attr', 'name', 'myFoo')
				.eq_('html', '<br>')
				;
		});
	},
	'should render @each' () {
		var a = "@each (tag) > section id='@tag.attr.id' > @placeholder"
		var b = `
			@tag #foo > div > 'fooContent'
			@tag #bar > span > 'barContent'
		`;
		var dom = $render(a, b);
		dom
			.eq_('length', 2)
			.eq(0)
			.eq_('prop', 'tagName', 'SECTION')
			.eq_('attr', 'id', 'foo')
			.eq_('html', '<div>fooContent</div>')
			.end()
			.eq(1)
			.eq_('prop', 'tagName', 'SECTION')
			.eq_('attr', 'id', 'bar')
			.eq_('html', '<span>barContent</span>')
			;
	}
})

function $render(tmplA, tmplB, model) {
	var tmpl = mask.merge(tmplA, tmplB);
	var dom = mask.render(tmpl, model);
	notEq_(dom, null);
	if (dom.nodeType === Node.DOCUMENT_FRAGMENT_NODE) 
		return $(dom.children);
	
	return $(dom);
}