var errors = [];
UTest({
	
	$before: function(){
		mask.on('error', error => errors.push(error));
	},
	$after: function(){
		
		mask.off('error');
	},
	
	'unexpect `<`': function(){
		
		var ast = mask.parse('baz <>');
		var error = errors.pop();
		
		has_(error.message, 'Invalid token: `<` at (1:5)')
		has_(error.message, 'attribute key');
		
		'but should parse everything before'
		eq_(ast.tagName, 'baz');
	},
	
	'parse dual `#`': function(){
		var fragment = mask.parse(`
			lorem ipsum; ##.how;
		`)
		var error = errors.pop();
		has_(error.message, 'Invalid token: `#` at (2:')
		
		var nodes = fragment.nodes;
		eq_(nodes.length, 2);
		has_(nodes[0], {
			tagName: 'lorem',
			attr: {
				ipsum: 'ipsum'
			}
		});
		eq_(nodes[1].tagName, 'div');
	},
	'dual `==` in attribute': function(){
		var fragment = mask.parse(`
			lorem ipsum==some;
		`)
		var error = errors.pop();
		has_(error.message, 'Invalid token: `=` at (2:')
	},
	'valid attribute': function(){
		var node = mask.parse("lorem ipsum='some;")
		var error = errors.pop();
		eq_(error, null);
		has_(node.attr, { ipsum: 'some;'})
	},
	'valid empty string': function(){
		var frag = mask.parse("lorem ipsum=some;'foo")
		var error = errors.pop();
		eq_(error, null);
		has_(frag.nodes[0].attr, {
			ipsum: 'some'
		});
		eq_(frag.nodes[1].content, 'foo');
	},
	'valid many next': function(){
		var node = mask.parse(`
			lorem >>> some
		`)
		var error = errors.pop();
		eq_(error, null);
		eq_(node.nodes[0].tagName, 'some');
	},
	'tag not closed warning': function(){
		var fragment = mask.parse(`
			foo {
				bar { foo
				
				baz { some }
			}
		`)
		var error = errors.pop();
		eq_(error.message, 'Tag was not closed: bar')
		
		eq_(mask.stringify(fragment), 'foo>bar>foo baz>some;');
	},
	'interpolation': function(){
		var node = mask.parse(`
			foo ~[bar]
		`)
		var error = errors.pop();
		has_(error.message, 'Invalid interpolation (in attr name)');
		console.log(node);
		
	},
	'expressions': {
		'invalid operators': function(){
			var ast = mask.render('"~[:1/+1]"');
			var error = errors.pop();
			
			has_(error.message, 'Unexpected operator Invalid token: `+` at (1:3)');
			has_(error.message, 'Parser stopped at: +1');
		},
		'unsupported bit shifting': function(){
			var ast = mask.render('"~[: 64<<1 ]"');
			var error = errors.pop();
			
			has_(error.message, 'Unexpected operator Invalid token: `<`');
			has_(error.message, 'Parser stopped at: <1');
		},
	}
})