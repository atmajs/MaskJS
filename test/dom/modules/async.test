// use default module loader
mask.config('modules', 'default');
UTest({
	'should load async javascripts scope' (done) {
		mask.define('TestAsync', mask.Compo({
			onRenderStart () {
				var x = this.$scope('X');
				eq_(x, null, 'Scope should be empty, while still loading');

				setTimeout(() => {
					x = this.$scope('X');
					has_(x, { foo: { name: 'Foo1' }});
					done();
				}, 300);
			}
		}));
		mask.render(`
			import async * as X from '/test/tmpl/modules/data_foo_1.js';
			TestAsync;
		`);
	},
	'should await the component': {
		'simple await' (done) {
			mask.define('TestAsync', mask.Compo({
				onRenderStart () {
					var x = this.$scope('X');
					has_(x, { foo: { name: 'Foo2' }});
					done();
				}
			}));
			mask.render(`
				import async * as X from '/test/tmpl/modules/data_foo_2.js';
				await (X) > TestAsync;
			`);
		},
		'progress await' (done) {
			mask.define('TestAsync', mask.Compo({
				onRenderStart () {
					var x = this.$scope('X');
					has_(x, { foo: { name: 'Foo3' }});

					$(dom)
						.find('.progress')
						.eq_('length', 0);

					done();
				}
			}));
			var dom = mask.render(`
				div {
					import async * as X from '/test/tmpl/modules/data_foo_3.js';
					await (X) {
						@progress > .progress > 'Loading';
						TestAsync;
					}
				}
			`);
			$(dom)
				.find('.progress')
				.eq_('length', 1)
				.eq_('text', 'Loading');
		}
	}
})

// vim: set ft=js: