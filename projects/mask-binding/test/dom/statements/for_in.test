var TestData = {
	simple: {
		template: `
			#container { 
				+for ((key, val) in letters) > 
					span > '~[: key + val]'
			}
		`,
	
		model: () => ({
			letters: {
				a: 'A',
				b: 'B'
			}
		}),
		
		check ($container, model, ctr) {
			$container.eq_('text', 'aAbB');
			
			eq_(model.__observers.letters.length, 1);
			
			model.letters = { c: 'C' };
			$container.eq_('text', 'cC');
			
			ctr.remove();
			eq_(model.__observers.letters.length, 0);
		}
	},
	nested: {
		template: `
			#container {
				+for ((letter, value) in letters) > div {
					'|~[letter]~[value.name]'
					+for (num in value.numbers) > span > '~[num]'
				}
			}
		`,
		model: () => ({
			letters: {
				a: {
					name: 'A',
					numbers: {
						'1': '_1_',
						'2': '_2_',
					}
				},
				b: {
					name: 'B',
					numbers: {
						'3': '_3_',
						'4': '_4_',
					}
				},
			}
		}),
		check ($container, model, ctr) {
			$container.eq_('text', '|aA12|bB34');
			
			eq_(model.__observers.letters.length, 1);
			
			model.letters.a.numbers = { '3': '_3_' };
			$container.eq_('text', '|aA3|bB34');
			
			ctr.remove();
			eq_(model.__observers.letters.length, 0);
		}
	}
};

UTest({
	'Browser': {
		'+for..in - simple' () {
			TestClient(TestData.simple);
		},
		'+for..in - nested' () {
			TestClient(TestData.nested);
		},
	},
	'Server': {
		// Backend
		'$config': {
			'http.include': '/test/node.libraries.js'
		},
		
		'+for..in - simple' () {
			return TestServer(TestData.simple);
		},
		
		'+for..in - nested' () {
			return TestServer(TestData.nested);
		}
	}
});

function TestClient (Data) {
	var Data = TestData.simple;
	var Ctor = Compo({
		template: Data.template,
		model: Data.model()
	});
	var app = Compo.initialize(Ctor);
	Data.check(app.$, app.model, app);
}
function TestServer (Data) {
	return $renderServer(Data.template, {
		model: Data.model()
	})
	.done((el, doc, win) => {
		Data.check(
			$(el),
			win.app.model,
			win.app
		)
	});
}