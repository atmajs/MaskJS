UTest({
	'should parse args' () {

		var syntax = '($$arguments[$$prop<accessor>](,))';
		var str = '(foo, bar)';
		var obj = parse(syntax, str);

		deepEq_(obj, {
			arguments: [
				{ prop: 'foo' },
				{ prop: 'bar' }
			]
		});
	},
	'should parse function name and the arguments' () {
		var syntax = '$$methodName<token>? ($$arguments[$$prop<token>?(? :? $$type<accessor>)](,))';

		[
			'testy (foo:Foo )',
			'testy(foo : Foo)',
			'testy 		(  foo :   Foo )',
			'testy( 	foo  :Foo 	)',
		]
		.forEach(str => {
			var obj = parse(syntax, str);
			deepEq_(obj, {
				methodName: 'testy',
				arguments: [
					{ prop: 'foo', type: 'Foo' }
				]
			});
		});

		
		
	},
	'should parse args with Type definition' () {
		var syntax = '($$arguments[$$prop<token>?(? :? $$type<accessor>)](,))';

		[
			'(foo:Foo)',
			'(foo : Foo)',
			'(foo:   Foo)',
			'(foo  :Foo)',
		]
		.forEach(str => {
			var obj = parse(syntax, str);
			deepEq_(obj, {
				arguments: [
					{ prop: 'foo', type: 'Foo' }
				]
			});
		});

		'> multiple arguments';
		[
			'(foo:Foo, bar: Bar)',
			'(foo : Foo  ,bar :Bar)',
			'(foo:   Foo,bar   : 	Bar)'
		]
		.forEach(str => {
			var obj = parse(syntax, str);
			deepEq_(obj, {
				arguments: [
					{ prop: 'foo', type: 'Foo' },
					{ prop: 'bar', type: 'Bar' }
				]
			});
		});


		'> one with definition, another without';
		[
			'(foo, bar: Bar)',
			'(foo  ,bar :Bar)',
			'(foo ,bar   : 	Bar)'
		]
		.forEach(str => {
			var obj = parse(syntax, str);
			deepEq_(obj, {
				arguments: [
					{ prop: 'foo' },
					{ prop: 'bar', type: 'Bar' }
				]
			});
		});
	},

	'should parse conditional group' () {
		var now = Date.now();
		var syntax = '|("foo"$$bar<accessor>)';
		
		'> should parse string'
		var str = '"Hello" some';
		var obj = parse(syntax, str);

		'> should parse var'
		var str = 'services.Test "Hello"';
		var obj = parse(syntax, str);
		deepEq_(obj, {
			bar: 'services.Test'
		});
	}
})

function parse(syntax, str) {	
	var lex = Mask.parser.ObjectLexer(syntax);
	var out = {};	
	lex(str, 0, str.length, out);
	return out;
}